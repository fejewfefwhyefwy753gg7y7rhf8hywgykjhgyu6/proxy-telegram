// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ API
async function getGeoLocationMultiAPI(ip) {
    const apis = [
        {
            name: 'ipapi.co',
            url: `https://ipapi.co/${ip}/json/`,
            parser: (data) => ({
                country: data.country_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                countryCode: data.country_code || 'N/A',
                region: data.region || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                city: data.city || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                isp: data.org || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            })
        },
        {
            name: 'ip-api.com',
            url: `http://ip-api.com/json/${ip}`,
            parser: (data) => {
                if (data.status !== 'success') throw new Error('API ip-api.com –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É');
                return {
                    country: data.country || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    countryCode: data.countryCode || 'N/A',
                    region: data.regionName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    city: data.city || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    isp: data.isp || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                };
            }
        },
        {
            name: 'ipinfo.io',
            url: `https://ipinfo.io/${ip}/json`,
            parser: (data) => ({
                country: data.country || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                countryCode: data.country || 'N/A',
                region: data.region || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                city: data.city || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                isp: data.org || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            })
        }
    ];

    for (const api of apis) {
        try {
            const response = await fetch(api.url, {
                headers: { 'User-Agent': 'Mozilla/5.0' }
            });
            if (response.ok) {
                const data = await response.json();
                return { ...api.parser(data), api: api.name };
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ API ${api.name}:`, error.message);
        }
    }
    
    return {
        country: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è',
        countryCode: 'N/A',
        region: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è',
        city: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è',
        isp: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è',
        api: '–í—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
    };
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
function formatTelegramMessage(userInfo) {
    const now = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
    const geo = userInfo.geoLocation;

    return `<b>üîç –ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n` +
        `<blockquote>` +
        `<b>‚è∞ –í—Ä–µ–º—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö</b>\n` +
        `<code>${now}</code>\n\n` +
        `<b>üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ</b>\n` +
        `<code>User Agent: ${userInfo.userAgent}</code>\n\n` +
        `<b>üåê –°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n` +
        `<code>IP –∞–¥—Ä–µ—Å: ${userInfo.ip}</code>\n\n` +
        `<b>üåç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è</b>\n` +
        `<code>–°—Ç—Ä–∞–Ω–∞: ${geo.country} (${geo.countryCode})\n` +
        `–†–µ–≥–∏–æ–Ω: ${geo.region}\n` +
        `–ì–æ—Ä–æ–¥: ${geo.city}\n` +
        `–ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${geo.isp}\n` +
        `API: ${geo.api}</code>\n\n` +
        `<b>üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n` +
        `<code>–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞: ${userInfo.screenResolution}\n` +
        `–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${userInfo.timezone}</code>` +
        `</blockquote>`;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendToTelegram(message) {
    const BOT_TOKEN = Deno.env.get("BOT_TOKEN");
    const CHAT_ID = Deno.env.get("CHAT_ID");

    if (!BOT_TOKEN || !CHAT_ID) {
        throw new Error("BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
    }

    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            chat_id: CHAT_ID,
            text: message,
            parse_mode: 'HTML'
        })
    });

    if (!response.ok) {
        const error = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ Telegram API: ${error}`);
    }
    return response.json();
}

// –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Deno Deploy
Deno.serve(async (request) => {
    const corsHeaders = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Accept',
    };

    if (request.method === 'OPTIONS') {
        return new Response(null, { headers: corsHeaders });
    }

    if (request.method !== 'POST') {
        return new Response('—Å–∞–ª–∞–º', { status: 405, headers: corsHeaders });
    }

    try {
        const userInfo = await request.json();
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
        userInfo.userAgent = userInfo.userAgent || 'N/A';
        userInfo.screenResolution = userInfo.screenResolution || 'N/A';
        userInfo.timezone = userInfo.timezone || 'N/A';
        
        const geoInfo = await getGeoLocationMultiAPI(userInfo.ip);
        userInfo.geoLocation = geoInfo;
        
        const message = formatTelegramMessage(userInfo);
        await sendToTelegram(message);

        return new Response(JSON.stringify({ success: true }), {
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
    } catch (error) {
        console.error("–ì–ª–∞–≤–Ω–∞—è –æ—à–∏–±–∫–∞:", error.message);
        return new Response(JSON.stringify({ error: error.message }), {
            status: 500,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
    }
});
